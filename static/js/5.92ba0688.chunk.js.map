{"version":3,"sources":["components/comon/Modal.js","store/Actions/Puzzle15.actions.js","components/15Puzzle/Tile.js","components/15Puzzle/Backgrounde.js","components/15Puzzle/Game.js","components/15Puzzle/Puzzle15.js"],"names":["ScoreModal","title","text","modal","setModal","newGame","isOpen","toggle","className","color","onClick","moveCellFunction","vector","array","emptyCell","x","y","setClickbles","i","j","clickForMove","newClickForMove","right","get","left","down","up","Tile","React","forwardRef","refer","cell","move","ref","PosedTile","posed","Backgrounde","memo","Game","moveUp","moveRight","moveLeft","moveDown","map","row","obj","val","connect","state","Puzzle15","moves","win","dispatch","shuffle","getState","length","Math","floor","random","type","SHUFFLE","payload","findeEmptyAndClickbles","FINDE_EMPTY_AND_CLICKBLES","newArray","MOVE_UP","moveUpAction","MOVE_RIGHT","moveRightAction","MOVE_DOWN","moveDownAction","MOVE_LEFT","moveLeftAction","checkSolvedOrNot","sortedArray","similarity","setTimeout","WIN","useEffect","window","addEventListener","keyDownHandler","removeEventListener","ev","keyCode","Container","Row","Col","xs","md","size","order","Button"],"mappings":"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","file":"static/js/5.92ba0688.chunk.js","sourcesContent":["import React from \"react\";\nimport { Modal, ModalBody, ModalHeader, ModalFooter, Button } from \"reactstrap\";\n\nexport const ScoreModal = ({ title, text, modal, setModal, newGame }) => {\n  return (\n    <Modal isOpen={modal} toggle={setModal}>\n      <ModalHeader className=\"justify-content-center\" toggle={setModal}>\n        {title}\n      </ModalHeader>\n      <ModalBody>{text}</ModalBody>\n      <ModalFooter>\n        <Button color=\"primary\" onClick={newGame}>\n          New Game\n        </Button>\n      </ModalFooter>\n    </Modal>\n  );\n};\n","import { get } from 'lodash';\nimport {\n  SHUFFLE,\n  FINDE_EMPTY_AND_CLICKBLES,\n  MOVE_UP,\n  MOVE_DOWN,\n  MOVE_LEFT,\n  MOVE_RIGHT,\n  WIN\n} from '../ActionTypes';\n\nexport const shuffleAction = () => (dispatch, getState) => {\n  const {\n    Puzzle15: { array }\n  } = getState();\n  for (let i = 0; i < array.length; i++) {\n    const j = Math.floor(Math.random() * (i + 1));\n    [array[i], array[j]] = [array[j], array[i]];\n    for (let x = 0; x < array[i].length; x++) {\n      const y = Math.floor(Math.random() * (x + 1));\n      [array[i][x], array[i][y]] = [array[i][y], array[i][x]];\n    }\n  }\n  dispatch({\n    type: SHUFFLE,\n    payload: [...array]\n  });\n};\n\nexport const findeEmptyAndClickblesAction = () => (dispatch, getState) => {\n  const {\n    Puzzle15: { array, clickForMove }\n  } = getState();\n  let emptyCell = [];\n  let newClickForMove;\n  for (let i = 0; i < array.length; i++) {\n    for (let j = 0; j < array[i].length; j++) {\n      if (array[i][j] === '') {\n        newClickForMove = setClickbles(i, j, array, clickForMove);\n        emptyCell = [i, j];\n      }\n    }\n  }\n  dispatch({\n    type: FINDE_EMPTY_AND_CLICKBLES,\n    payload: { emptyCell, clickForMove: newClickForMove }\n  });\n};\n\nexport const moveUpAction = (payload = [1, 0]) => (dispatch, getState) => {\n  const vector = payload;\n  const {\n    Puzzle15: { array, emptyCell }\n  } = getState();\n  const newArray = moveCellFunction(vector, array, emptyCell);\n  if (newArray !== null) {\n    dispatch({\n      type: MOVE_UP,\n      payload: [...newArray]\n    });\n  }\n  return;\n};\n\nexport const moveRightAction = (payload = [0, -1]) => (dispatch, getState) => {\n  const vector = payload;\n  const {\n    Puzzle15: { array, emptyCell }\n  } = getState();\n  const newArray = moveCellFunction(vector, array, emptyCell);\n  if (newArray !== null) {\n    dispatch({\n      type: MOVE_RIGHT,\n      payload: [...newArray]\n    });\n  }\n  return;\n};\n\nexport const moveDownAction = (payload = [-1, 0]) => (dispatch, getState) => {\n  const vector = payload;\n  const {\n    Puzzle15: { array, emptyCell }\n  } = getState();\n  const newArray = moveCellFunction(vector, array, emptyCell);\n  if (newArray !== null) {\n    dispatch({\n      type: MOVE_DOWN,\n      payload: [...newArray]\n    });\n  }\n  return;\n};\nexport const moveLeftAction = (payload = [0, 1]) => (dispatch, getState) => {\n  const vector = payload;\n  const {\n    Puzzle15: { array, emptyCell }\n  } = getState();\n  const newArray = moveCellFunction(vector, array, emptyCell);\n  if (newArray !== null) {\n    dispatch({\n      type: MOVE_LEFT,\n      payload: [...newArray]\n    });\n  }\n  return;\n};\n\nconst moveCellFunction = (vector, array, emptyCell) => {\n  let x = emptyCell[0] + vector[0];\n  let y = emptyCell[1] + vector[1];\n  if (x >= 0 && y >= 0 && y < 4 && x < 4) {\n    [array[emptyCell[0]][emptyCell[1]], array[x][y]] = [\n      array[x][y],\n      array[emptyCell[0]][emptyCell[1]]\n    ];\n    return [...array];\n  } else {\n    return null;\n  }\n};\n\nexport const checkSolvedOrNotAction = () => (dispatch, getState) => {\n  const {\n    Puzzle15: { array, sortedArray }\n  } = getState();\n  let similarity = 0;\n  for (let i = 0; i < array.length; i++) {\n    for (let j = 0; j < array[i].length; j++) {\n      if (array[i][j] === sortedArray[i][j]) {\n        similarity++;\n      }\n    }\n  }\n  if (similarity === 16) {\n    setTimeout(() => {\n      dispatch({ type: WIN });\n    }, 600);\n  }\n};\n\nconst setClickbles = (i, j, array, clickForMove) => {\n  const newClickForMove = { ...clickForMove };\n  const right = get(array, `[${i}][${j - 1}]`, null);\n  const left = get(array, `[${i}][${j + 1}]`, null);\n  const down = get(array, `[${i - 1}][${j}]`, null);\n  const up = get(array, `[${i + 1}][${j}]`, null);\n  if (left !== null) {\n    newClickForMove.left = left;\n  } else {\n    newClickForMove.left = null;\n  }\n  if (right !== null) {\n    newClickForMove.right = right;\n  } else {\n    newClickForMove.right = null;\n  }\n  if (up !== null) {\n    newClickForMove.up = up;\n  } else {\n    newClickForMove.up = null;\n  }\n  if (down !== null) {\n    newClickForMove.down = down;\n  } else {\n    newClickForMove.down = null;\n  }\n  return newClickForMove;\n};\n","import React from 'react';\nimport posed from 'react-pose';\nconst Tile = React.forwardRef(({ cell, move }, refer) => {\n  return (\n    <div\n      ref={refer}\n      onClick={move}\n      className={cell === '' ? 'emptyCell' : 'cell'}\n    >\n      {cell}\n    </div>\n  );\n});\n\nconst PosedTile = posed(Tile)();\n\nexport default PosedTile;\n","import React from 'react';\n\nconst Backgrounde = () => {\n  return (\n    <div className='fake'>\n      <div className='fake-cell'></div>\n      <div className='fake-cell'></div>\n      <div className='fake-cell'></div>\n      <div className='fake-cell'></div>\n      <div className='fake-cell'></div>\n      <div className='fake-cell'></div>\n      <div className='fake-cell'></div>\n      <div className='fake-cell'></div>\n      <div className='fake-cell'></div>\n      <div className='fake-cell'></div>\n      <div className='fake-cell'></div>\n      <div className='fake-cell'></div>\n      <div className='fake-cell'></div>\n      <div className='fake-cell'></div>\n      <div className='fake-cell'></div>\n      <div className='fake-cell'></div>\n    </div>\n  );\n};\n\nexport default React.memo(Backgrounde);\n","import React from 'react';\n\nimport { PoseGroup } from 'react-pose';\nimport PosedTile from './Tile';\nimport Back from './Backgrounde';\n\nconst Game = ({\n  array,\n  moveUp,\n  moveRight,\n  moveLeft,\n  moveDown,\n  clickForMove\n}) => {\n  const passClickFunctions = (obj, val) => {\n    if (obj.left === val) {\n      return moveLeft;\n    }\n    if (obj.right === val) {\n      return moveRight;\n    }\n    if (obj.down === val) {\n      return moveDown;\n    }\n    if (obj.up === val) {\n      return moveUp;\n    }\n  };\n\n  return (\n    <div className='board'>\n      <Back />\n      <div className='game'>\n        <PoseGroup>\n          {array.map(row =>\n            row.map(cell => (\n              <PosedTile\n                move={passClickFunctions(clickForMove, cell)}\n                cell={cell}\n                key={cell}\n              />\n            ))\n          )}\n        </PoseGroup>\n      </div>\n    </div>\n  );\n};\n\nexport default Game;\n","import React, { useEffect } from \"react\";\nimport { Container, Row, Col, Button } from \"reactstrap\";\nimport { connect } from \"react-redux\";\nimport {\n  shuffleAction,\n  findeEmptyAndClickblesAction,\n  moveDownAction,\n  moveLeftAction,\n  moveRightAction,\n  moveUpAction,\n  checkSolvedOrNotAction\n} from \"../../store/Actions/Puzzle15.actions\";\nimport Game from \"./Game\";\nimport { ScoreModal } from \"../comon/Modal\";\nimport \"./index.scss\";\n\nconst Puzzle15 = ({\n  array,\n  shuffle,\n  findeEmptyAndClickbles,\n  moveDown,\n  moveLeft,\n  moveRight,\n  moveUp,\n  checkSolvedOrNot,\n  clickForMove,\n  moves,\n  win\n}) => {\n  useEffect(() => {\n    findeEmptyAndClickbles();\n    checkSolvedOrNot();\n  }, [findeEmptyAndClickbles, array, checkSolvedOrNot]);\n\n  useEffect(() => {\n    window.addEventListener(\"keydown\", keyDownHandler);\n    shuffle();\n    return () => {\n      window.removeEventListener(\"keydown\", keyDownHandler);\n    };\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, []);\n\n  const keyDownHandler = ev => {\n    switch (ev.keyCode) {\n      case 38:\n        moveUp();\n        break;\n      case 40:\n        moveDown();\n        break;\n      case 37:\n        moveLeft();\n        break;\n      case 39:\n        moveRight();\n        break;\n      default:\n        break;\n    }\n  };\n\n  return (\n    <Container>\n      <Row>\n        <Col\n          className=\"justify-content-center align-items-center d-flex flex-column\"\n          xs={6}\n          md={{ size: 3, order: 1 }}\n        >\n          <p className=\"h4 w-100\">INSTRUCTIONS</p>\n          <p className=\"h6\">\n            Move tiles in grid to order them from 1 to 15. To move a tile you\n            can click on it or use your arrow keys.\n          </p>\n        </Col>\n        <Col\n          className=\"justify-content-center align-items-center d-flex flex-column\"\n          xs={6}\n          md={{ size: 3, order: 3 }}\n        >\n          <span className=\"no-select-text display-4 mb-3\">{moves}</span>\n          <Button className=\"mb-2\" color=\"primary\" onClick={shuffle}>\n            Shuffle\n          </Button>\n        </Col>\n        <Col\n          className=\"justify-content-center align-items-center d-flex\"\n          xs={12}\n          md={{ size: 6, order: 2 }}\n        >\n          <Game\n            array={array}\n            moveDown={moveDown}\n            moveLeft={moveLeft}\n            moveRight={moveRight}\n            moveUp={moveUp}\n            clickForMove={clickForMove}\n          />\n        </Col>\n      </Row>\n      <ScoreModal\n        text={`Congratulations you have won in ${moves} moves !!!`}\n        title=\"You have won !!!\"\n        modal={win}\n        newGame={shuffle}\n        setModal={shuffle}\n      />\n    </Container>\n  );\n};\n\nconst mapStateToProps = state => ({\n  array: state.Puzzle15.array,\n  clickForMove: state.Puzzle15.clickForMove,\n  moves: state.Puzzle15.moves,\n  win: state.Puzzle15.win\n});\nconst mapDispatchToProps = dispatch => ({\n  shuffle: () => dispatch(shuffleAction()),\n  findeEmptyAndClickbles: () => dispatch(findeEmptyAndClickblesAction()),\n  moveUp: () => dispatch(moveUpAction()),\n  moveRight: () => dispatch(moveRightAction()),\n  moveDown: () => dispatch(moveDownAction()),\n  moveLeft: () => dispatch(moveLeftAction()),\n  checkSolvedOrNot: () => dispatch(checkSolvedOrNotAction())\n});\n\nexport default connect(mapStateToProps, mapDispatchToProps)(Puzzle15);\n"],"sourceRoot":""}