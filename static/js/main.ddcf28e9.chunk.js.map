{"version":3,"sources":["store/ActionTypes.js","components/comon/NavBar.js","components/comon/CenterSpiner.js","App.js","serviceWorker.js","store/Reducers/Puzzle15.reducer.js","store/Reducers/index.js","store/store.js","index.js"],"names":["SHUFFLE","FINDE_EMPTY_AND_CLICKBLES","MOVE_UP","MOVE_RIGHT","MOVE_DOWN","MOVE_LEFT","WIN","Navigation","useState","isOpen","setIsOpen","toggle","Navbar","color","dark","expand","className","NavbarBrand","tag","onClick","undefined","to","NavbarToggler","Collapse","navbar","Nav","NavItem","NavLink","CenterSpiner","style","minHeight","Spinner","width","height","Home","lazy","MatchPic","Puzzle15","Snake","App","fallback","path","exact","Boolean","window","location","hostname","match","initialState","win","moves","sortedArray","array","emptyCell","clickForMove","up","right","down","left","rootReducer","combineReducers","state","type","payload","composeEnhancers","__REDUX_DEVTOOLS_EXTENSION_COMPOSE__","compose","store","createStore","applyMiddleware","Thunk","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.ddcf28e9.chunk.js","sourcesContent":["export const SHUFFLE = 'SHUFFLE';\nexport const FINDE_EMPTY_AND_CLICKBLES = 'FINDE_EMPTY_AND_CLICKBLES';\nexport const MOVE_UP = 'MOVE_UP';\nexport const MOVE_RIGHT = 'MOVE_RIGHT';\nexport const MOVE_DOWN = 'MOVE_DOWN';\nexport const MOVE_LEFT = 'MOVE_LEFT';\nexport const WIN = 'WIN';\n","import React, { useState } from \"react\";\nimport {\n  Navbar,\n  NavbarBrand,\n  Collapse,\n  NavbarToggler,\n  Nav,\n  NavItem,\n  NavLink,\n} from \"reactstrap\";\nimport { Link } from \"react-router-dom\";\n\nexport const Navigation = () => {\n  const [isOpen, setIsOpen] = useState(false);\n\n  const toggle = () => setIsOpen(!isOpen);\n  return (\n    <Navbar color=\"dark\" dark expand=\"md\" className=\"mb-xs-2 mb-md-4 px-3\">\n      <NavbarBrand className=\"text-white\" color=\"light\" tag=\"div\">\n        <Link\n          onClick={isOpen ? toggle : undefined}\n          className=\"text-white navbar-brand\"\n          to=\"/\"\n        >\n          REACT GAMES\n        </Link>\n      </NavbarBrand>\n      <NavbarToggler onClick={toggle} />\n      <Collapse isOpen={isOpen} navbar>\n        <Nav className=\"ml-auto\" navbar>\n          <NavItem>\n            <NavLink tag=\"span\">\n              <Link\n                onClick={isOpen ? toggle : undefined}\n                className=\"nav-link\"\n                to=\"/puzzle-15\"\n              >\n                15 Puzzle\n              </Link>\n            </NavLink>\n          </NavItem>\n          <NavItem>\n            <NavLink tag=\"span\">\n              <Link\n                onClick={isOpen ? toggle : undefined}\n                className=\"nav-link\"\n                to=\"/match-the-picture\"\n              >\n                Match the picture\n              </Link>\n            </NavLink>\n          </NavItem>\n          <NavItem>\n            <NavLink tag=\"span\">\n              <Link\n                onClick={isOpen ? toggle : undefined}\n                className=\"nav-link\"\n                to=\"/snake\"\n              >\n                Snake\n              </Link>\n            </NavLink>\n          </NavItem>\n        </Nav>\n      </Collapse>\n    </Navbar>\n  );\n};\n","import React from \"react\";\nimport { Spinner } from \"reactstrap\";\n\nconst CenterSpiner = () => {\n\treturn (\n\t\t<div\n\t\t\tstyle={{ minHeight: \"70vh\" }}\n\t\t\tclassName=\"d-flex justify-content-center align-items-center\"\n\t\t>\n\t\t\t<Spinner style={{ width: \"3rem\", height: \"3rem\" }} color=\"secondary\" />\n\t\t</div>\n\t);\n};\n\nexport default CenterSpiner;\n","import React, { lazy, Suspense } from \"react\";\nimport { Navigation } from \"../src/components/comon/NavBar\";\nimport { Switch, HashRouter as Router, Route } from \"react-router-dom\";\nimport Spinner from \"./components/comon/CenterSpiner\";\nconst Home = lazy(() => import(\"./components/comon/Home\"));\nconst MatchPic = lazy(() => import(\"./components/matchPic/Game\"));\nconst Puzzle15 = lazy(() => import(\"./components/15Puzzle/Puzzle15\"));\nconst Snake = lazy(() => import(\"./components/snake/Snake\"));\n\nfunction App() {\n\treturn (\n\t\t<>\n\t\t\t<Router>\n\t\t\t\t<Navigation />\n\t\t\t\t<Suspense fallback={<Spinner />}>\n\t\t\t\t\t<Switch>\n\t\t\t\t\t\t<Route path=\"/\" exact>\n\t\t\t\t\t\t\t<Home />\n\t\t\t\t\t\t</Route>\n\t\t\t\t\t\t<Route path=\"/snake\">\n\t\t\t\t\t\t\t<Snake />\n\t\t\t\t\t\t</Route>\n\t\t\t\t\t\t<Route path=\"/match-the-picture\">\n\t\t\t\t\t\t\t<MatchPic />\n\t\t\t\t\t\t</Route>\n\t\t\t\t\t\t<Route path=\"/puzzle-15\">\n\t\t\t\t\t\t\t<Puzzle15 />\n\t\t\t\t\t\t</Route>\n\t\t\t\t\t</Switch>\n\t\t\t\t</Suspense>\n\t\t\t</Router>\n\t\t</>\n\t);\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import {\n  SHUFFLE,\n  FINDE_EMPTY_AND_CLICKBLES,\n  MOVE_DOWN,\n  MOVE_LEFT,\n  MOVE_RIGHT,\n  MOVE_UP,\n  WIN\n} from '../ActionTypes';\nconst initialState = {\n  win: false,\n  moves: 0,\n  sortedArray: [\n    [1, 2, 3, 4],\n    [5, 6, 7, 8],\n    [9, 10, 11, 12],\n    [13, 14, 15, '']\n  ],\n  array: [\n    [1, 2, 3, 4],\n    [5, 6, 7, 8],\n    [9, 10, 11, 12],\n    [13, 14, '', 15]\n  ],\n  emptyCell: [3, 3],\n  clickForMove: {\n    up: null,\n    right: null,\n    down: null,\n    left: null\n  }\n};\n\nexport default (state = initialState, { type, payload }) => {\n  switch (type) {\n    case SHUFFLE:\n      return { ...state, array: payload, moves: 0, win: false };\n    case FINDE_EMPTY_AND_CLICKBLES:\n      return {\n        ...state,\n        emptyCell: payload.emptyCell,\n        clickForMove: payload.clickForMove\n      };\n    case MOVE_UP:\n      return { ...state, array: payload, moves: state.moves + 1 };\n    case MOVE_RIGHT:\n      return { ...state, array: payload, moves: state.moves + 1 };\n    case MOVE_DOWN:\n      return { ...state, array: payload, moves: state.moves + 1 };\n    case MOVE_LEFT:\n      return { ...state, array: payload, moves: state.moves + 1 };\n    case WIN:\n      return { ...state, win: true };\n    default:\n      return state;\n  }\n};\n","import { combineReducers } from 'redux';\nimport Puzzle15 from './Puzzle15.reducer';\n\nexport const rootReducer = combineReducers({\n  Puzzle15\n});\n","import { createStore, compose, applyMiddleware } from 'redux';\nimport { rootReducer } from './Reducers/index';\nimport Thunk from 'redux-thunk';\n\nconst composeEnhancers = window.__REDUX_DEVTOOLS_EXTENSION_COMPOSE__ || compose;\n\nconst store = createStore(\n  rootReducer,\n  {},\n  composeEnhancers(applyMiddleware(Thunk))\n);\n\nexport default store;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport { Provider } from 'react-redux';\nimport store from './store/store';\n\nReactDOM.render(\n  <Provider store={store}>\n    <App />\n  </Provider>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}