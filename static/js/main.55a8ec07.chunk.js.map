{"version":3,"sources":["store/ActionTypes.js","components/comon/NavBar.js","components/comon/CenterSpiner.js","App.js","serviceWorker.js","store/Reducers/Puzzle15.reducer.js","store/Reducers/index.js","store/store.js","index.js"],"names":["SHUFFLE","FINDE_EMPTY_AND_CLICKBLES","MOVE_UP","MOVE_RIGHT","MOVE_DOWN","MOVE_LEFT","WIN","Navigation","useState","isOpen","setIsOpen","toggle","Navbar","color","dark","expand","className","NavbarBrand","tag","onClick","undefined","to","NavbarToggler","Collapse","navbar","Nav","NavItem","NavLink","CenterSpiner","style","minHeight","Spinner","width","height","Home","lazy","MatchPic","Puzzle15","Snake","App","fallback","path","exact","Boolean","window","location","hostname","match","initialState","win","moves","sortedArray","array","emptyCell","clickForMove","up","right","down","left","rootReducer","combineReducers","state","type","payload","composeEnhancers","__REDUX_DEVTOOLS_EXTENSION_COMPOSE__","compose","store","createStore","applyMiddleware","Thunk","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.55a8ec07.chunk.js","sourcesContent":["export const SHUFFLE = 'SHUFFLE';\r\nexport const FINDE_EMPTY_AND_CLICKBLES = 'FINDE_EMPTY_AND_CLICKBLES';\r\nexport const MOVE_UP = 'MOVE_UP';\r\nexport const MOVE_RIGHT = 'MOVE_RIGHT';\r\nexport const MOVE_DOWN = 'MOVE_DOWN';\r\nexport const MOVE_LEFT = 'MOVE_LEFT';\r\nexport const WIN = 'WIN';\r\n","import React, { useState } from \"react\";\r\nimport {\r\n\tNavbar,\r\n\tNavbarBrand,\r\n\tCollapse,\r\n\tNavbarToggler,\r\n\tNav,\r\n\tNavItem,\r\n\tNavLink\r\n} from \"reactstrap\";\r\nimport { Link } from \"react-router-dom\";\r\n\r\nexport const Navigation = () => {\r\n\tconst [isOpen, setIsOpen] = useState(false);\r\n\r\n\tconst toggle = () => setIsOpen(!isOpen);\r\n\treturn (\r\n\t\t<Navbar color=\"dark\" dark expand=\"md\" className=\"mb-xs-2 mb-md-4\">\r\n\t\t\t<NavbarBrand className=\"text-white\" color=\"light\" tag=\"div\">\r\n\t\t\t\t<Link\r\n\t\t\t\t\tonClick={isOpen ? toggle : undefined}\r\n\t\t\t\t\tclassName=\"text-white navbar-brand\"\r\n\t\t\t\t\tto=\"/\"\r\n\t\t\t\t>\r\n\t\t\t\t\tREACT GAMES\r\n\t\t\t\t</Link>\r\n\t\t\t</NavbarBrand>\r\n\t\t\t<NavbarToggler onClick={toggle} />\r\n\t\t\t<Collapse isOpen={isOpen} navbar>\r\n\t\t\t\t<Nav className=\"ml-auto\" navbar>\r\n\t\t\t\t\t<NavItem>\r\n\t\t\t\t\t\t<NavLink tag=\"span\">\r\n\t\t\t\t\t\t\t<Link\r\n\t\t\t\t\t\t\t\tonClick={isOpen ? toggle : undefined}\r\n\t\t\t\t\t\t\t\tclassName=\"nav-link\"\r\n\t\t\t\t\t\t\t\tto=\"/puzzle-15\"\r\n\t\t\t\t\t\t\t>\r\n\t\t\t\t\t\t\t\t15 Puzzle\r\n\t\t\t\t\t\t\t</Link>\r\n\t\t\t\t\t\t</NavLink>\r\n\t\t\t\t\t</NavItem>\r\n\t\t\t\t\t<NavItem>\r\n\t\t\t\t\t\t<NavLink tag=\"span\">\r\n\t\t\t\t\t\t\t<Link\r\n\t\t\t\t\t\t\t\tonClick={isOpen ? toggle : undefined}\r\n\t\t\t\t\t\t\t\tclassName=\"nav-link\"\r\n\t\t\t\t\t\t\t\tto=\"/match-the-picture\"\r\n\t\t\t\t\t\t\t>\r\n\t\t\t\t\t\t\t\tMatch the picture\r\n\t\t\t\t\t\t\t</Link>\r\n\t\t\t\t\t\t</NavLink>\r\n\t\t\t\t\t</NavItem>\r\n\t\t\t\t\t<NavItem>\r\n\t\t\t\t\t\t<NavLink tag=\"span\">\r\n\t\t\t\t\t\t\t<Link\r\n\t\t\t\t\t\t\t\tonClick={isOpen ? toggle : undefined}\r\n\t\t\t\t\t\t\t\tclassName=\"nav-link\"\r\n\t\t\t\t\t\t\t\tto=\"/snake\"\r\n\t\t\t\t\t\t\t>\r\n\t\t\t\t\t\t\t\tSnake\r\n\t\t\t\t\t\t\t</Link>\r\n\t\t\t\t\t\t</NavLink>\r\n\t\t\t\t\t</NavItem>\r\n\t\t\t\t</Nav>\r\n\t\t\t</Collapse>\r\n\t\t</Navbar>\r\n\t);\r\n};\r\n","import React from \"react\";\r\nimport { Spinner } from \"reactstrap\";\r\n\r\nconst CenterSpiner = () => {\r\n\treturn (\r\n\t\t<div\r\n\t\t\tstyle={{ minHeight: \"70vh\" }}\r\n\t\t\tclassName=\"d-flex justify-content-center align-items-center\"\r\n\t\t>\r\n\t\t\t<Spinner style={{ width: \"3rem\", height: \"3rem\" }} color=\"secondary\" />\r\n\t\t</div>\r\n\t);\r\n};\r\n\r\nexport default CenterSpiner;\r\n","import React, { lazy, Suspense } from \"react\";\r\nimport { Navigation } from \"../src/components/comon/NavBar\";\r\nimport { Switch, HashRouter as Router, Route } from \"react-router-dom\";\r\nimport Spinner from \"./components/comon/CenterSpiner\";\r\nconst Home = lazy(() => import(\"./components/comon/Home\"));\r\nconst MatchPic = lazy(() => import(\"./components/matchPic/Game\"));\r\nconst Puzzle15 = lazy(() => import(\"./components/15Puzzle/Puzzle15\"));\r\nconst Snake = lazy(() => import(\"./components/snake/Snake\"));\r\n\r\nfunction App() {\r\n\treturn (\r\n\t\t<>\r\n\t\t\t<Router>\r\n\t\t\t\t<Navigation />\r\n\t\t\t\t<Suspense fallback={<Spinner />}>\r\n\t\t\t\t\t<Switch>\r\n\t\t\t\t\t\t<Route path=\"/\" exact>\r\n\t\t\t\t\t\t\t<Home />\r\n\t\t\t\t\t\t</Route>\r\n\t\t\t\t\t\t<Route path=\"/snake\">\r\n\t\t\t\t\t\t\t<Snake />\r\n\t\t\t\t\t\t</Route>\r\n\t\t\t\t\t\t<Route path=\"/match-the-picture\">\r\n\t\t\t\t\t\t\t<MatchPic />\r\n\t\t\t\t\t\t</Route>\r\n\t\t\t\t\t\t<Route path=\"/puzzle-15\">\r\n\t\t\t\t\t\t\t<Puzzle15 />\r\n\t\t\t\t\t\t</Route>\r\n\t\t\t\t\t</Switch>\r\n\t\t\t\t</Suspense>\r\n\t\t\t</Router>\r\n\t\t</>\r\n\t);\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.1/8 is considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl)\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import {\r\n  SHUFFLE,\r\n  FINDE_EMPTY_AND_CLICKBLES,\r\n  MOVE_DOWN,\r\n  MOVE_LEFT,\r\n  MOVE_RIGHT,\r\n  MOVE_UP,\r\n  WIN\r\n} from '../ActionTypes';\r\nconst initialState = {\r\n  win: false,\r\n  moves: 0,\r\n  sortedArray: [\r\n    [1, 2, 3, 4],\r\n    [5, 6, 7, 8],\r\n    [9, 10, 11, 12],\r\n    [13, 14, 15, '']\r\n  ],\r\n  array: [\r\n    [1, 2, 3, 4],\r\n    [5, 6, 7, 8],\r\n    [9, 10, 11, 12],\r\n    [13, 14, '', 15]\r\n  ],\r\n  emptyCell: [3, 3],\r\n  clickForMove: {\r\n    up: null,\r\n    right: null,\r\n    down: null,\r\n    left: null\r\n  }\r\n};\r\n\r\nexport default (state = initialState, { type, payload }) => {\r\n  switch (type) {\r\n    case SHUFFLE:\r\n      return { ...state, array: payload, moves: 0, win: false };\r\n    case FINDE_EMPTY_AND_CLICKBLES:\r\n      return {\r\n        ...state,\r\n        emptyCell: payload.emptyCell,\r\n        clickForMove: payload.clickForMove\r\n      };\r\n    case MOVE_UP:\r\n      return { ...state, array: payload, moves: state.moves + 1 };\r\n    case MOVE_RIGHT:\r\n      return { ...state, array: payload, moves: state.moves + 1 };\r\n    case MOVE_DOWN:\r\n      return { ...state, array: payload, moves: state.moves + 1 };\r\n    case MOVE_LEFT:\r\n      return { ...state, array: payload, moves: state.moves + 1 };\r\n    case WIN:\r\n      return { ...state, win: true };\r\n    default:\r\n      return state;\r\n  }\r\n};\r\n","import { combineReducers } from 'redux';\r\nimport Puzzle15 from './Puzzle15.reducer';\r\n\r\nexport const rootReducer = combineReducers({\r\n  Puzzle15\r\n});\r\n","import { createStore, compose, applyMiddleware } from 'redux';\r\nimport { rootReducer } from './Reducers/index';\r\nimport Thunk from 'redux-thunk';\r\n\r\nconst composeEnhancers = window.__REDUX_DEVTOOLS_EXTENSION_COMPOSE__ || compose;\r\n\r\nconst store = createStore(\r\n  rootReducer,\r\n  {},\r\n  composeEnhancers(applyMiddleware(Thunk))\r\n);\r\n\r\nexport default store;\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\nimport 'bootstrap/dist/css/bootstrap.min.css';\r\nimport { Provider } from 'react-redux';\r\nimport store from './store/store';\r\n\r\nReactDOM.render(\r\n  <Provider store={store}>\r\n    <App />\r\n  </Provider>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}