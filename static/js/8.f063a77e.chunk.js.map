{"version":3,"sources":["store/Actions/Puzzle15.actions.js","components/15Puzzle/Tile.js","components/15Puzzle/Backgrounde.js","components/15Puzzle/Game.js","components/15Puzzle/Puzzle15.js","components/comon/Modal.js"],"names":["moveCellFunction","vector","array","emptyCell","x","y","setClickbles","i","j","clickForMove","newClickForMove","right","get","left","down","up","Tile","React","forwardRef","refer","cell","move","ref","onClick","className","PosedTile","posed","memo","Game","moveUp","moveRight","moveLeft","moveDown","map","row","obj","val","key","connect","state","Puzzle15","moves","win","dispatch","shuffle","getState","length","Math","floor","random","type","SHUFFLE","payload","findeEmptyAndClickbles","FINDE_EMPTY_AND_CLICKBLES","newArray","MOVE_UP","moveUpAction","MOVE_RIGHT","moveRightAction","MOVE_DOWN","moveDownAction","MOVE_LEFT","moveLeftAction","checkSolvedOrNot","sortedArray","similarity","setTimeout","WIN","useEffect","window","addEventListener","keyDownHandler","removeEventListener","ev","keyCode","Container","Row","Col","xs","md","size","order","Button","color","text","title","modal","newGame","setModal","ScoreModal","isOpen","toggle"],"mappings":"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","file":"static/js/8.f063a77e.chunk.js","sourcesContent":["import { get } from 'lodash';\r\nimport {\r\n  SHUFFLE,\r\n  FINDE_EMPTY_AND_CLICKBLES,\r\n  MOVE_UP,\r\n  MOVE_DOWN,\r\n  MOVE_LEFT,\r\n  MOVE_RIGHT,\r\n  WIN\r\n} from '../ActionTypes';\r\n\r\nexport const shuffleAction = () => (dispatch, getState) => {\r\n  const {\r\n    Puzzle15: { array }\r\n  } = getState();\r\n  for (let i = 0; i < array.length; i++) {\r\n    const j = Math.floor(Math.random() * (i + 1));\r\n    [array[i], array[j]] = [array[j], array[i]];\r\n    for (let x = 0; x < array[i].length; x++) {\r\n      const y = Math.floor(Math.random() * (x + 1));\r\n      [array[i][x], array[i][y]] = [array[i][y], array[i][x]];\r\n    }\r\n  }\r\n  dispatch({\r\n    type: SHUFFLE,\r\n    payload: [...array]\r\n  });\r\n};\r\n\r\nexport const findeEmptyAndClickblesAction = () => (dispatch, getState) => {\r\n  const {\r\n    Puzzle15: { array, clickForMove }\r\n  } = getState();\r\n  let emptyCell = [];\r\n  let newClickForMove;\r\n  for (let i = 0; i < array.length; i++) {\r\n    for (let j = 0; j < array[i].length; j++) {\r\n      if (array[i][j] === '') {\r\n        newClickForMove = setClickbles(i, j, array, clickForMove);\r\n        emptyCell = [i, j];\r\n      }\r\n    }\r\n  }\r\n  dispatch({\r\n    type: FINDE_EMPTY_AND_CLICKBLES,\r\n    payload: { emptyCell, clickForMove: newClickForMove }\r\n  });\r\n};\r\n\r\nexport const moveUpAction = (payload = [1, 0]) => (dispatch, getState) => {\r\n  const vector = payload;\r\n  const {\r\n    Puzzle15: { array, emptyCell }\r\n  } = getState();\r\n  const newArray = moveCellFunction(vector, array, emptyCell);\r\n  if (newArray !== null) {\r\n    dispatch({\r\n      type: MOVE_UP,\r\n      payload: [...newArray]\r\n    });\r\n  }\r\n  return;\r\n};\r\n\r\nexport const moveRightAction = (payload = [0, -1]) => (dispatch, getState) => {\r\n  const vector = payload;\r\n  const {\r\n    Puzzle15: { array, emptyCell }\r\n  } = getState();\r\n  const newArray = moveCellFunction(vector, array, emptyCell);\r\n  if (newArray !== null) {\r\n    dispatch({\r\n      type: MOVE_RIGHT,\r\n      payload: [...newArray]\r\n    });\r\n  }\r\n  return;\r\n};\r\n\r\nexport const moveDownAction = (payload = [-1, 0]) => (dispatch, getState) => {\r\n  const vector = payload;\r\n  const {\r\n    Puzzle15: { array, emptyCell }\r\n  } = getState();\r\n  const newArray = moveCellFunction(vector, array, emptyCell);\r\n  if (newArray !== null) {\r\n    dispatch({\r\n      type: MOVE_DOWN,\r\n      payload: [...newArray]\r\n    });\r\n  }\r\n  return;\r\n};\r\nexport const moveLeftAction = (payload = [0, 1]) => (dispatch, getState) => {\r\n  const vector = payload;\r\n  const {\r\n    Puzzle15: { array, emptyCell }\r\n  } = getState();\r\n  const newArray = moveCellFunction(vector, array, emptyCell);\r\n  if (newArray !== null) {\r\n    dispatch({\r\n      type: MOVE_LEFT,\r\n      payload: [...newArray]\r\n    });\r\n  }\r\n  return;\r\n};\r\n\r\nconst moveCellFunction = (vector, array, emptyCell) => {\r\n  let x = emptyCell[0] + vector[0];\r\n  let y = emptyCell[1] + vector[1];\r\n  if (x >= 0 && y >= 0 && y < 4 && x < 4) {\r\n    [array[emptyCell[0]][emptyCell[1]], array[x][y]] = [\r\n      array[x][y],\r\n      array[emptyCell[0]][emptyCell[1]]\r\n    ];\r\n    return [...array];\r\n  } else {\r\n    return null;\r\n  }\r\n};\r\n\r\nexport const checkSolvedOrNotAction = () => (dispatch, getState) => {\r\n  const {\r\n    Puzzle15: { array, sortedArray }\r\n  } = getState();\r\n  let similarity = 0;\r\n  for (let i = 0; i < array.length; i++) {\r\n    for (let j = 0; j < array[i].length; j++) {\r\n      if (array[i][j] === sortedArray[i][j]) {\r\n        similarity++;\r\n      }\r\n    }\r\n  }\r\n  if (similarity === 16) {\r\n    setTimeout(() => {\r\n      dispatch({ type: WIN });\r\n    }, 600);\r\n  }\r\n};\r\n\r\nconst setClickbles = (i, j, array, clickForMove) => {\r\n  const newClickForMove = { ...clickForMove };\r\n  const right = get(array, `[${i}][${j - 1}]`, null);\r\n  const left = get(array, `[${i}][${j + 1}]`, null);\r\n  const down = get(array, `[${i - 1}][${j}]`, null);\r\n  const up = get(array, `[${i + 1}][${j}]`, null);\r\n  if (left !== null) {\r\n    newClickForMove.left = left;\r\n  } else {\r\n    newClickForMove.left = null;\r\n  }\r\n  if (right !== null) {\r\n    newClickForMove.right = right;\r\n  } else {\r\n    newClickForMove.right = null;\r\n  }\r\n  if (up !== null) {\r\n    newClickForMove.up = up;\r\n  } else {\r\n    newClickForMove.up = null;\r\n  }\r\n  if (down !== null) {\r\n    newClickForMove.down = down;\r\n  } else {\r\n    newClickForMove.down = null;\r\n  }\r\n  return newClickForMove;\r\n};\r\n","import React from 'react';\r\nimport posed from 'react-pose';\r\nconst Tile = React.forwardRef(({ cell, move }, refer) => {\r\n  return (\r\n    <div\r\n      ref={refer}\r\n      onClick={move}\r\n      className={cell === '' ? 'emptyCell' : 'cell'}\r\n    >\r\n      {cell}\r\n    </div>\r\n  );\r\n});\r\n\r\nconst PosedTile = posed(Tile)();\r\n\r\nexport default PosedTile;\r\n","import React from 'react';\r\n\r\nconst Backgrounde = () => {\r\n  return (\r\n    <div className='fake'>\r\n      <div className='fake-cell'></div>\r\n      <div className='fake-cell'></div>\r\n      <div className='fake-cell'></div>\r\n      <div className='fake-cell'></div>\r\n      <div className='fake-cell'></div>\r\n      <div className='fake-cell'></div>\r\n      <div className='fake-cell'></div>\r\n      <div className='fake-cell'></div>\r\n      <div className='fake-cell'></div>\r\n      <div className='fake-cell'></div>\r\n      <div className='fake-cell'></div>\r\n      <div className='fake-cell'></div>\r\n      <div className='fake-cell'></div>\r\n      <div className='fake-cell'></div>\r\n      <div className='fake-cell'></div>\r\n      <div className='fake-cell'></div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default React.memo(Backgrounde);\r\n","import React from 'react';\r\n\r\nimport { PoseGroup } from 'react-pose';\r\nimport PosedTile from './Tile';\r\nimport Back from './Backgrounde';\r\n\r\nconst Game = ({\r\n  array,\r\n  moveUp,\r\n  moveRight,\r\n  moveLeft,\r\n  moveDown,\r\n  clickForMove\r\n}) => {\r\n  const passClickFunctions = (obj, val) => {\r\n    if (obj.left === val) {\r\n      return moveLeft;\r\n    }\r\n    if (obj.right === val) {\r\n      return moveRight;\r\n    }\r\n    if (obj.down === val) {\r\n      return moveDown;\r\n    }\r\n    if (obj.up === val) {\r\n      return moveUp;\r\n    }\r\n  };\r\n\r\n  return (\r\n    <div className='board'>\r\n      <Back />\r\n      <div className='game'>\r\n        <PoseGroup>\r\n          {array.map(row =>\r\n            row.map(cell => (\r\n              <PosedTile\r\n                move={passClickFunctions(clickForMove, cell)}\r\n                cell={cell}\r\n                key={cell}\r\n              />\r\n            ))\r\n          )}\r\n        </PoseGroup>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Game;\r\n","import React, { useEffect } from \"react\";\r\nimport { Container, Row, Col, Button } from \"reactstrap\";\r\nimport { connect } from \"react-redux\";\r\nimport {\r\n  shuffleAction,\r\n  findeEmptyAndClickblesAction,\r\n  moveDownAction,\r\n  moveLeftAction,\r\n  moveRightAction,\r\n  moveUpAction,\r\n  checkSolvedOrNotAction\r\n} from \"../../store/Actions/Puzzle15.actions\";\r\nimport Game from \"./Game\";\r\nimport { ScoreModal } from \"../comon/Modal\";\r\nimport \"./index.scss\";\r\n\r\nconst Puzzle15 = ({\r\n  array,\r\n  shuffle,\r\n  findeEmptyAndClickbles,\r\n  moveDown,\r\n  moveLeft,\r\n  moveRight,\r\n  moveUp,\r\n  checkSolvedOrNot,\r\n  clickForMove,\r\n  moves,\r\n  win\r\n}) => {\r\n  useEffect(() => {\r\n    findeEmptyAndClickbles();\r\n    checkSolvedOrNot();\r\n  }, [findeEmptyAndClickbles, array, checkSolvedOrNot]);\r\n\r\n  useEffect(() => {\r\n    window.addEventListener(\"keydown\", keyDownHandler);\r\n    shuffle();\r\n    return () => {\r\n      window.removeEventListener(\"keydown\", keyDownHandler);\r\n    };\r\n    // eslint-disable-next-line react-hooks/exhaustive-deps\r\n  }, []);\r\n\r\n  const keyDownHandler = ev => {\r\n    switch (ev.keyCode) {\r\n      case 38:\r\n        moveUp();\r\n        break;\r\n      case 40:\r\n        moveDown();\r\n        break;\r\n      case 37:\r\n        moveLeft();\r\n        break;\r\n      case 39:\r\n        moveRight();\r\n        break;\r\n      default:\r\n        break;\r\n    }\r\n  };\r\n\r\n  return (\r\n    <Container>\r\n      <Row>\r\n        <Col\r\n          className=\"justify-content-center align-items-center d-flex flex-column\"\r\n          xs={6}\r\n          md={{ size: 3, order: 1 }}\r\n        >\r\n          <p className=\"h4 w-100\">INSTRUCTIONS</p>\r\n          <p className=\"h6\">\r\n            Move tiles in grid to order them from 1 to 15. To move a tile you\r\n            can click on it or use your arrow keys.\r\n          </p>\r\n        </Col>\r\n        <Col\r\n          className=\"justify-content-center align-items-center d-flex flex-column\"\r\n          xs={6}\r\n          md={{ size: 3, order: 3 }}\r\n        >\r\n          <span className=\"no-select-text display-4 mb-3\">{moves}</span>\r\n          <Button className=\"mb-2\" color=\"primary\" onClick={shuffle}>\r\n            Shuffle\r\n          </Button>\r\n        </Col>\r\n        <Col\r\n          className=\"justify-content-center align-items-center d-flex\"\r\n          xs={12}\r\n          md={{ size: 6, order: 2 }}\r\n        >\r\n          <Game\r\n            array={array}\r\n            moveDown={moveDown}\r\n            moveLeft={moveLeft}\r\n            moveRight={moveRight}\r\n            moveUp={moveUp}\r\n            clickForMove={clickForMove}\r\n          />\r\n        </Col>\r\n      </Row>\r\n      <ScoreModal\r\n        text={`Congratulations you have won in ${moves} moves !!!`}\r\n        title=\"You have won !!!\"\r\n        modal={win}\r\n        newGame={shuffle}\r\n        setModal={shuffle}\r\n      />\r\n    </Container>\r\n  );\r\n};\r\n\r\nconst mapStateToProps = state => ({\r\n  array: state.Puzzle15.array,\r\n  clickForMove: state.Puzzle15.clickForMove,\r\n  moves: state.Puzzle15.moves,\r\n  win: state.Puzzle15.win\r\n});\r\nconst mapDispatchToProps = dispatch => ({\r\n  shuffle: () => dispatch(shuffleAction()),\r\n  findeEmptyAndClickbles: () => dispatch(findeEmptyAndClickblesAction()),\r\n  moveUp: () => dispatch(moveUpAction()),\r\n  moveRight: () => dispatch(moveRightAction()),\r\n  moveDown: () => dispatch(moveDownAction()),\r\n  moveLeft: () => dispatch(moveLeftAction()),\r\n  checkSolvedOrNot: () => dispatch(checkSolvedOrNotAction())\r\n});\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(Puzzle15);\r\n","import React from \"react\";\r\nimport { Modal, ModalBody, ModalHeader, ModalFooter, Button } from \"reactstrap\";\r\n\r\nexport const ScoreModal = ({ title, text, modal, setModal, newGame }) => {\r\n  return (\r\n    <Modal isOpen={modal} toggle={setModal}>\r\n      <ModalHeader className=\"justify-content-center\" toggle={setModal}>\r\n        {title}\r\n      </ModalHeader>\r\n      <ModalBody>{text}</ModalBody>\r\n      <ModalFooter>\r\n        <Button color=\"primary\" onClick={newGame}>\r\n          New Game\r\n        </Button>\r\n      </ModalFooter>\r\n    </Modal>\r\n  );\r\n};\r\n"],"sourceRoot":""}